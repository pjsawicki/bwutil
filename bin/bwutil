#!/usr/bin/env zsh

bwutil::help(){
	print -u2 -l - \
'Found functions:' \
"	${(@)^functions[(I)bwutil*]}" \
"
Environment variables:
	BW_KEY         key name given to keyctl
	BW_TIMEOUT     revokation timeout given to keyctl
"
	return "$1"
}

bwutil::get-session(){
	local key=${BW_KEY:-bw}
	local -i timeout=${BW_TIMEOUT:-0}
	: ${key:=bw}
	if [[ -n ${BW_SESSION:=$(keyctl pipe $(keyctl request user $key))} ]] ; then
		return 0
	fi
	if BW_SESSION=$(command bw unlock --raw); then
		# Insert new/update old key
		# "@u": Default user session keyring
		: $(keyctl add user $key "$BW_SESSION" @u)
		set +x
		((timeout > 0)) && keyctl timeout "$_" $timeout
	fi
}

bwutil::edit(){
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?

	TMPPREFIX=${XDG_RUNTIME_DIR:-/tmp}/bw-edit/
	TMPSUFFIX=.json

	zmodload -m -F zsh/files b:'zf_*'
	zf_mkdir -m 700 $TMPPREFIX

	trap RETURN 'zf_rm -r $TMPPREFIX'

	(){
		local id REPLY
		cp $1 $1.bak
		while :; do
			${=${VISUAL:-$EDITOR}} $1
			if diff --color=auto "$1" "$1.bak"; then
				read -k 1 'REPLY?No edits made. Try again(Y), insert anyway(n), or exit(e)?'
				case $REPLY:l in
					n) break ;;
					e) return 1 ;;
					*) continue ;;
				esac
			fi

			# Check for well-formed json
			if ! id=$(jq .id -r < "$1"); then
				read -k 1 'REPLY?Ill-formatted json. Try again(Y), insert anyway(n), or exit(e)?'
				case $REPLY:l in
					n) break ;;
					e) return 1 ;;
					*) continue ;;
				esac
			fi
			break
		done
		set -x
		bw encode < "$1" | bw edit "$2" "$id"
	} =(bw get "$@" | jq) "$@"
}

bwutil::ls(){
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?
	bw list items | jq -r '.[]|.id+"\t"+.name'
}

bwutil::fzf(){
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?

	local items ret
	items=$(bwutil::ls) || return 1
	fzf --with-nth=2.. <<< $items
}

bwutil::menu(){
set -x
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?
	
	local -a menu action
	case ${WAYLAND_DISPLAY+w}$2 in
		wt*)
			menu=(wofi -p "bw $1" -d -i)
			action=(ydotool type --file -)
		;;
		w*)
			menu=(wofi -p "bw $1" -d -i)
			action=(wl-copy)
		;;
		t*)
			menu=(rofi -p "bw $1" -dmenu -i)
			action=(xdotool type --clearmodifiers --file -)
		;;
		*)
			menu=(rofi -p "bw $1" -dmenu -i)
			action=(xclip -sel c)
	esac
	local item=$(bwutil::ls | $menu | cut -f 1)
	case $1 in
		(t|)otp) oathtool -b --totp $(bw get item $item | jq '.login.totp | match("secret=[^&]*").string[7:]')
			;;
		*) bw get "$1" "$item"
	esac | $action
}

bwutil::transform(){
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?

	bw list items | jq "$@" | bw encode | bw import bitwardenjson /dev/stdin
}

bwutil(){
	emulate -L zsh
	[[ -v BW_SESSION ]] || local -x BW_SESSION
	bwutil::get-session || return $?

	local action=$functions[(ei)bwutil::$1]
	: ${action:=$commands[(ei)bwutil::$1]}

	if [[ -n $action ]]; then
		BW_SESSION=$BW_SESSION $action "${@:2}"
	else
		print -u2 "No helper function bwutil::$1"
		bw "$@" || bwutil::help 1
	fi
}

bwutil "$@"
